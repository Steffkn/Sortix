using Sortix.Sorting;
using System;
using System.Collections.Generic;
using System.Text;

namespace SortixTests.Data
{
    public class DataContext
    {
        public static readonly List<SortingAlgorithm> SortingAlgorithms = new List<SortingAlgorithm>
        {
                new BubbleSort(),
                new InsertionSort(),
                new MergeSort(),
                new QuickSort(),
                new RadixSort(),
                new SelectionSort(),
        };

        public static readonly List<object> AllTypesArray = new List<object>
        {
            new int[] { -45, -35, -31, -24, -11, -9, -7, -1, 0, 6, 8, 13, 15, 19, 25, 29, 40, 41, 42, 49 },
            new int[] { -45, -35, -35, -35, -31, -31, -31, -24, -24, -24, -11, -11, -11, -9, -9, -9, -7, -1, 0, 6, 8, 13, 15, 19, 25, 29, 40, 41, 42, 49 },
            new double[] { 8.454618974799271775, 8.577323915865069472, 11.867512731096119862, 11.917230100699398619, 26.469344819866811684, 31.377813733297348321, 51.011045939648100139, 51.921479410665886279, 58.511963657694732579, 59.792687567103469373, 61.688777786994325682, 65.359032781485297252, 66.778428032154663693, 67.635492948900163810, 69.451372866533561107, 79.666128646220873004, 82.237335857464305023, 84.725189301378694896, 92.621601655763210709, 97.149760239164734150 },
            new double[] { 2611870.2685560431352, 0249991.2710084110502, 8316271.2478352216219, 7073293.9703832691758, 8947293.7853790663501, 1685468.0509372649030, 0365545.1048090734062, 8022953.8749665099482, 7640934.9131675989090, 0793198.6968625121073, 4707437.4664033858953, 5999428.1909011094536, 6030126.6611895635330, 3850932.8451026582121, 2700493.9115380652690, 9717795.1393291552671, 7575513.2737645390212, 6535928.1943208902986, 8680630.9823363220708, 3218514.4754293838177, },
        };

        public static readonly int[] SimpleArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        public static readonly List<int[]> SortedIntegers = new List<int[]>
        {
            new int[] { -45, -35, -31, -24, -11, -9, -7, -1, 0, 6, 8, 13, 15, 19, 25, 29, 40, 41, 42, 49 },
            new int[] { -46, -35, -31, -29, -28, -27, -15, -14, -10, -7, -1, 2, 7, 8, 15, 20, 21, 25, 34, 47 },
            new int[] { -37, -30, -26, -22, -15, -5, -4, -3, 15, 16, 18, 23, 28, 30, 36, 38, 45, 48, 49, 50 }
        };

        public static readonly List<int[]> SortedIntegersWithDiplicates = new List<int[]>
        {
            new int[] { -45, -35, -35, -35, -31, -31, -31, -24, -24, -24, -11, -11, -11, -9, -9, -9, -7, -1, 0, 6, 8, 13, 15, 19, 25, 29, 40, 41, 42, 49 },
            new int[] { -46, -35, -35, -35, -31, -31, -31, -29, -29, -29, -28, -28, -28, -27, -27, -27, -15, -14, -10, -7, -1, 2, 7, 8, 15, 20, 21, 25, 34, 47 },
            new int[] { -37, -30, -30, -30, -26, -26, -26, -22, -22, -22, -15, -15, -15, -5, -5, -5, -4, -3, 15, 16, 18, 23, 28, 30, 36, 38, 45, 48, 49, 50 }
        };

        public static readonly List<int[]> UnorderedIntegers = new List<int[]>
        {

            new int[] { 10, -42, -32, 46, -15, -2, 29, 25, 43, -19, -10, -21, -47, -30, -24, 36, 48, 50, 28, 35 },
            new int[] { -13, -37, 21, -3, 11, 34, -48, 44, -14, -8, -32, 31, 10, 37, -30, 47, -41, -29, 39, 35 },
            new int[] { -35, -9, -38, -44, -17, -3, -22, 25, 2, 42, -27, 48, 50, 41, 6, -26, -48, -23, -11, 15 }
        };

        public static readonly List<int[]> UnorderedIntegersWithDiplicates = new List<int[]>
        {
            new int[] { 10, -42, -32, 10, -42, -32, 46, -15, -2, 29, 25, 43, -19, -10, -21, -47, -30, -24, 36, -30, -24, 36, 48, 50, 28, 35 },
            new int[] { -13, -37, 21,-13, -37, 21, -3, 11, 34, -48, 44, -14, -8, -32, 31, 10, 37, -30, 47, -41, -30, 47, -41, -29, 39, 35 },
            new int[] { -35, -9, -38, -35, -9, -38, -44, -17, -3, -22, 25, 2, 42, -27, 48, 50, 41, 6, -26, -48,  6, -26, -48, -23, -11, 15 }
        };

        public static readonly List<double[]> SortedDoubles = new List<double[]>
        {
            new double[] { 8.454618974799271775, 8.577323915865069472, 11.867512731096119862, 11.917230100699398619, 26.469344819866811684, 31.377813733297348321, 51.011045939648100139, 51.921479410665886279, 58.511963657694732579, 59.792687567103469373, 61.688777786994325682, 65.359032781485297252, 66.778428032154663693, 67.635492948900163810, 69.451372866533561107, 79.666128646220873004, 82.237335857464305023, 84.725189301378694896, 92.621601655763210709, 97.149760239164734150 },
            new double[] { 0.03306684705432685899, 0.05773160689305398576, 0.14210644336035232444, 0.31776712272675306523, 0.33988406607898804679, 0.34235230252600183073, 0.47274989471295281788, 0.52372995631815329138, 0.59111508785480880760, 0.65390256408949786270, 0.74688196536839886712, 0.75255122816594978344, 0.75750653284429091102, 0.77541202703031803782, 0.79149685196787212610, 0.82267182501491511331, 0.89657473652909204373, 0.90783843097924522631, 0.97969412768657005819, 0.98719244882438903805 },
            new double[] { 249991.2710084110502, 365545.1048090734062, 793198.6968625121073, 1685468.0509372649030, 2611870.2685560431352, 2700493.9115380652690, 3218514.4754293838177, 3850932.8451026582121, 4707437.4664033858953, 5999428.1909011094536, 6030126.6611895635330, 6535928.1943208902986, 7073293.9703832691758, 7575513.2737645390212, 7640934.9131675989090, 8022953.8749665099482, 8316271.2478352216219, 8680630.9823363220708, 8947293.7853790663501, 9717795.1393291552671, }
        };

        public static readonly List<double[]> SortedDoublesWithDuplicates = new List<double[]>
        {
            new double[] { 8.454618974799271775, 8.577323915865069472, 8.577323915865069472, 11.867512731096119862, 11.917230100699398619, 11.917230100699398619, 26.469344819866811684, 31.377813733297348321, 51.011045939648100139, 51.921479410665886279, 51.921479410665886279, 58.511963657694732579, 59.792687567103469373, 59.792687567103469373, 61.688777786994325682, 65.359032781485297252, 66.778428032154663693, 67.635492948900163810, 69.451372866533561107, 69.451372866533561107, 79.666128646220873004, 82.237335857464305023, 82.237335857464305023, 82.237335857464305023, 84.725189301378694896, 84.725189301378694896, 84.725189301378694896, 92.621601655763210709, 97.149760239164734150 },
            new double[] { 0.03306684705432685899, 0.03306684705432685899, 0.03306684705432685899, 0.05773160689305398576, 0.14210644336035232444, 0.14210644336035232444, 0.14210644336035232444, 0.31776712272675306523, 0.33988406607898804679, 0.34235230252600183073, 0.34235230252600183073, 0.47274989471295281788, 0.52372995631815329138, 0.59111508785480880760, 0.65390256408949786270, 0.65390256408949786270, 0.74688196536839886712, 0.75255122816594978344, 0.75750653284429091102, 0.77541202703031803782, 0.79149685196787212610, 0.82267182501491511331, 0.89657473652909204373, 0.89657473652909204373, 0.90783843097924522631, 0.97969412768657005819, 0.98719244882438903805, 0.98719244882438903805, 0.98719244882438903805 },
            new double[] { 249991.2710084110502, 249991.2710084110502, 365545.1048090734062, 793198.6968625121073, 793198.6968625121073, 793198.6968625121073, 1685468.0509372649030, 2611870.2685560431352, 2611870.2685560431352, 2611870.2685560431352, 2700493.9115380652690, 2700493.9115380652690, 3218514.4754293838177, 3850932.8451026582121, 3850932.8451026582121, 3850932.8451026582121, 3850932.8451026582121, 4707437.4664033858953, 5999428.1909011094536, 5999428.1909011094536, 6030126.6611895635330, 6030126.6611895635330, 6535928.1943208902986, 7073293.9703832691758, 7575513.2737645390212, 7640934.9131675989090, 8022953.8749665099482, 8316271.2478352216219, 8316271.2478352216219, 8680630.9823363220708, 8947293.7853790663501, 8947293.7853790663501, 9717795.1393291552671, }
        };

        public static readonly List<double[]> UnorderedDoubles = new List<double[]>
        {
            new double[] { 27.776063546815026964, 38.496969308666680520, 28.924107787010720755, 23.507500567582710609, 75.685353126525025955, 54.843291765115395335, 62.479972794688678384, 84.364706688617491927, 71.077305211195612765, 37.493917330195763927, 22.954013364958271052, 34.383269529991478525, 86.180928602848610986, 90.358315697486296481, 93.572388502650137283, 69.787350373087389608, 23.776109925116723451, 66.13399088412090449, 67.339513790339188686, 10.708311644543601317 },
            new double[] { 10.658994041739340724, 86.368306136320335358, 53.293209986153201046, 67.705911505088854672, 12.207795316240231983, 67.909572513729784979, 55.942574040458043336, 7.379520449403937870, 99.815414914983273760, 84.796354472030093035, 67.045627801016103478, 55.289197018203395847, 53.075108160187124207, 31.218177090259283545, 56.503699285706628005, 50.336372740743387589, 4.219971005361615356, 18.648465631119553334, 15.939580476647764087, 82.057189840742385469 },
            new double[] { 2611870.2685560431352, 0249991.2710084110502, 8316271.2478352216219, 7073293.9703832691758, 8947293.7853790663501, 1685468.0509372649030, 0365545.1048090734062, 8022953.8749665099482, 7640934.9131675989090, 0793198.6968625121073, 4707437.4664033858953, 5999428.1909011094536, 6030126.6611895635330, 3850932.8451026582121, 2700493.9115380652690, 9717795.1393291552671, 7575513.2737645390212, 6535928.1943208902986, 8680630.9823363220708, 3218514.4754293838177, },
            new double[] { 0.50492240230368981247, 0.19869838432804481641, 0.32997402042536100077, 0.80872002925800214120, 0.64787099399832834251, 0.75151522044051415600, 0.87253709721589859179, 0.48104447243522089674, 0.76381315506667807918, 0.81252552241255171899, 0.91064391444845963350, 0.12072059405222187119, 0.78133165096111778977, 0.99760048716882881267, 0.05978885655156833297, 0.26252198263914071505, 0.18478305784334986216, 0.39480467731646032861, 0.66247215227522191605, 0.87865334455526203586 }
        };

        public static readonly List<double[]> UnorderedDoublesWithDuplicates = new List<double[]>
        {
            new double[] { 27.776063546815026964, 27.776063546815026964, 38.496969308666680520, 38.496969308666680520, 28.924107787010720755, 28.924107787010720755, 23.507500567582710609, 75.685353126525025955, 54.843291765115395335, 62.479972794688678384, 84.364706688617491927, 84.364706688617491927, 71.077305211195612765, 37.493917330195763927, 22.954013364958271052, 34.383269529991478525, 86.180928602848610986, 90.358315697486296481, 93.572388502650137283, 69.787350373087389608, 23.776109925116723451, 93.572388502650137283, 69.787350373087389608, 23.776109925116723451, 66.13399088412090449, 67.339513790339188686, 10.708311644543601317, 67.339513790339188686, 10.708311644543601317 },
            new double[] { 53.941568256726116797, 56.981789258166766918, 53.941568256726116797, 56.981789258166766918, 63.249221051023884415, 79.581905946869985476, 37.776795633365221720, 55.995339376921560645, 72.620471723036033262, 80.454342042992682422, 23.513807240552573509, 30.646969086792363852, 55.995339376921560645, 72.620471723036033262, 80.454342042992682422, 23.513807240552573509, 30.646969086792363852, 3.988934925202746440, 1.914281672798750556, 92.222316858048351418, 71.712016177161114286, 71.023344445692083125, 85.520090303416913172, 10.766822111109658242, 71.487453459527717105, 85.286239084403833669, 48.175596880634485228 },
            new double[] { 2611870.2685560431352, 0249991.2710084110502, 8316271.2478352216219, 7073293.9703832691758, 8947293.7853790663501, 8316271.2478352216219, 7073293.9703832691758, 8947293.7853790663501, 8316271.2478352216219, 7073293.9703832691758, 8947293.7853790663501, 1685468.0509372649030, 0365545.1048090734062, 8022953.8749665099482, 7640934.9131675989090, 0793198.6968625121073, 4707437.4664033858953, 5999428.1909011094536, 6030126.6611895635330, 3850932.8451026582121, 2700493.9115380652690, 9717795.1393291552671, 7575513.2737645390212, 6535928.1943208902986, 8680630.9823363220708, 3218514.4754293838177, },
            new double[] { 0.50492240230368981247, 0.19869838432804481641, 0.32997402042536100077, 0.50492240230368981247, 0.19869838432804481641, 0.32997402042536100077, 0.32997402042536100077, 0.50492240230368981247, 0.19869838432804481641, 0.32997402042536100077, 0.19869838432804481641, 0.32997402042536100077, 0.80872002925800214120, 0.64787099399832834251, 0.75151522044051415600, 0.87253709721589859179, 0.48104447243522089674, 0.76381315506667807918, 0.81252552241255171899, 0.91064391444845963350, 0.12072059405222187119, 0.78133165096111778977, 0.99760048716882881267, 0.05978885655156833297, 0.26252198263914071505, 0.18478305784334986216, 0.39480467731646032861, 0.66247215227522191605, 0.87865334455526203586 }
        };

        public static readonly List<char[]> SortedCharacters = new List<char[]>
        {
            new char[] {'A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u', 'V', 'v', 'W', 'w', 'X', 'x', 'Y', 'y', 'Z', 'z', 'А', 'а', 'Б', 'б', 'В', 'в', 'Г', 'г', 'Д', 'д', 'Е', 'е', 'Ж', 'ж', 'З', 'з', 'И', 'и', 'Й', 'й', 'К', 'к', 'Л', 'л', 'М', 'м', 'Н', 'н', 'О', 'о', 'П', 'п', 'Р', 'р', 'С', 'с', 'Т', 'т', 'У', 'у', 'Ф', 'ф', 'Х', 'х', 'Ц', 'ц', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ', 'Ъ', 'ъ', 'Ь', 'ь', 'Ю', 'ю', 'Я', 'я'},
        };

        public static readonly List<char[]> UnorderedCharacters = new List<char[]>
        {
            new char[] {'t', 'Т', 'z', 'я', 'G', 'Q', 'Ф', 'C', 'х', 'В', 'з', 'F', 'е', 'у', 'Ц', 'с', 'k', 'Ш', 'З', 'б', 'L', 'T', 'И', 'й', 'Б', 'f', 'ф', 'м', 'a', 'o', 'r', 'D', 'q', 'S', 'g', 'п', 'н', 'l', 'ч', 'Р', 'Ь', 'Y', 'Е', 'P', 'A', 'р', 'в', 'w', 'c', 'Л', 'К', 'а', 'X', 'H', 'д', 'K', 'i', 'Ч', 'к', 'U', 'v', 'j', 'E', 'С', 'p', 'Ю', 's', 'M', 'e', 'л', 'b', 'Щ', 'm', 'о', 'I', 'ж', 'О', 'А', 'М', 'Г', 'Д', 'ь', 'd', 'R', 'Х', 'J', 'П', 'щ', 'O', 'Z', 'n', 'ю', 'т', 'Ъ', 'N', 'y', 'ъ', 'x', 'Н', 'ц', 'V', 'Я', 'u', 'г', 'h', 'ш', 'Ж', 'У', 'Й', 'и', 'B', 'W'},
        };
        public static readonly List<string[]> SortedStrings = new List<string[]>
        {
            new string[] { "accident", "bitter", "career", "combination", "conceive", "connection", "constraint", "feedback", "harmony", "husband", "information", "interface", "mathematics", "mechanical", "morning", "prestige", "relative", "remark", "square", "willpower", },
            new string[] { "ash", "bet", "bow", "can", "die", "ear", "ego", "fit", "fly", "go", "inn", "joy", "kid", "lot", "mix", "owe", "pay", "pen", "red", "tax", },
            new string[] { "admission", "analyst", "brother", "concern", "confront", "element", "fascinate", "migration", "observer", "overeat", "passive", "problem", "quarrel", "resident", "revolution", "sentence", "shelter", "student", "sustain", "systematic" }
        };

        public static readonly List<string[]> UnorderedStrings = new List<string[]>
        {
            new string[] { "husband", "accident", "feedback", "combination", "square", "mathematics", "mechanical", "conceive", "relative", "willpower", "bitter", "constraint", "interface", "harmony", "connection", "career", "morning", "prestige", "remark", "information" },
            new string[] { "joy", "owe", "bet", "inn", "die", "ego", "ash", "mix", "red", "go", "pen", "kid", "tax", "pay", "fit", "can", "lot", "fly", "ear", "bow" },
            new string[] { "analyst", "observer", "quarrel", "sustain", "student", "fascinate", "passive", "revolution", "resident", "element", "shelter", "confront", "admission", "concern", "overeat", "migration", "brother", "systematic", "sentence", "problem" }
        };
    }
}
